[{"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\index.js":"1","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\reportWebVitals.js":"2","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\store\\store.js":"3","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\container\\App.js":"4","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\config.js":"5","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\store\\reducers\\home.js":"6","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\utils\\contract.js":"7","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Index\\Index.js":"8","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Navbar\\Navbar.js":"9","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Navigate\\Navigate.js":"10","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Modal\\Modal.js":"11","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Token\\Token.js":"12","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCard.js":"13","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Account\\Account.js":"14","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardHeader.js":"15","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardDes.js":"16","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardFooter.js":"17","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FooterTabsView.js":"18","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCards.js":"19","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\StakeData.js":"20","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCards2.js":"21","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCards3.js":"22","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCardInfo.js":"23"},{"size":749,"mtime":1609075888943,"results":"24","hashOfConfig":"25"},{"size":375,"mtime":1609075888944,"results":"26","hashOfConfig":"25"},{"size":124,"mtime":1609075888947,"results":"27","hashOfConfig":"25"},{"size":4166,"mtime":1609075888942,"results":"28","hashOfConfig":"25"},{"size":5582,"mtime":1609075888941,"results":"29","hashOfConfig":"25"},{"size":229,"mtime":1609075888946,"results":"30","hashOfConfig":"25"},{"size":585,"mtime":1609075888948,"results":"31","hashOfConfig":"25"},{"size":23620,"mtime":1609094355654,"results":"32","hashOfConfig":"25"},{"size":1570,"mtime":1609095280664,"results":"33","hashOfConfig":"25"},{"size":1661,"mtime":1609092992033,"results":"34","hashOfConfig":"25"},{"size":2326,"mtime":1609075888935,"results":"35","hashOfConfig":"25"},{"size":572,"mtime":1609075888940,"results":"36","hashOfConfig":"25"},{"size":742,"mtime":1609075888919,"results":"37","hashOfConfig":"25"},{"size":768,"mtime":1609075888916,"results":"38","hashOfConfig":"25"},{"size":461,"mtime":1609075888923,"results":"39","hashOfConfig":"25"},{"size":231,"mtime":1609075888920,"results":"40","hashOfConfig":"25"},{"size":562,"mtime":1609075888922,"results":"41","hashOfConfig":"25"},{"size":3620,"mtime":1609075888917,"results":"42","hashOfConfig":"25"},{"size":1205,"mtime":1609092992022,"results":"43","hashOfConfig":"25"},{"size":749,"mtime":1609075888928,"results":"44","hashOfConfig":"25"},{"size":1352,"mtime":1609075888926,"results":"45","hashOfConfig":"25"},{"size":1384,"mtime":1609076767244,"results":"46","hashOfConfig":"25"},{"size":3578,"mtime":1609075888924,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"15nndgk",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\index.js",[],["102","103"],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\reportWebVitals.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\store\\store.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\container\\App.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\config.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\store\\reducers\\home.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\utils\\contract.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Index\\Index.js",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./Index.css\";\r\nimport \"./pop.css\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Modal from \"react-modal\";\r\nimport \"../../../node_modules/awesome-react-steps/lib/css/arrows.css\";\r\nimport { Arrows } from \"awesome-react-steps\";\r\nimport { Row, Col, Container } from \"react-bootstrap\";\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    width: \"40%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    borderRadius: \"30px\",\r\n    padding: \"20px\",\r\n  },\r\n};\r\nModal.defaultStyles.overlay.backgroundColor = \"#00000087\";\r\n\r\n// Modal.setAppElement('#yourAppElement')\r\n\r\nexport default function Index(props) {\r\n  const [contract, setContract] = useState();\r\n\r\n  const [isPopUpFirstPage, setPopUpFirstPage] = useState(true);\r\n  const [formStep, setFormStep] = useState(0);\r\n\r\n  const [tokenAddress, setTokenAddress] = useState(\"\");\r\n  const [pair2Address, setPair2Address] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [startBlock, setStartBlock] = useState(\"\");\r\n  const [multiplier, setMultiplier] = useState(1);\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [expectedLiquidity, setExpectedLiquidity] = useState(\"\");\r\n\r\n  const [bonusEndDate, setBonusEndDate] = useState(\"\");\r\n  const [bonusEndBlock, setBonusEndBlock] = useState(\"\");\r\n  const [bonusAmount, setBonusAmount] = useState(\"\");\r\n\r\n  const [endBlockDate, setEndBlockDate] = useState(\"\");\r\n  const [endBlock, setEndBlock] = useState(\"\");\r\n\r\n  const [modalIsOpen, setIsOpen] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsOpen(props.isCreateFarmModalOpen);\r\n  }, [props.isCreateFarmModalOpen]);\r\n\r\n  useEffect(() => {\r\n    setContract(props.contract);\r\n  }, [props.contract]);\r\n\r\n  function afterOpenModal() {\r\n    // references are now sync'd and can be accessed.\r\n  }\r\n\r\n  function closeModal() {\r\n    setIsOpen(false);\r\n  }\r\n\r\n  const submitForm = async () => {\r\n    if (contract) {\r\n      console.log(\r\n        \"functios\",\r\n        tokenAddress,\r\n        expectedLiquidity,\r\n        pair2Address,\r\n        multiplier,\r\n        startBlock,\r\n        bonusEndBlock,\r\n        bonusAmount\r\n      );\r\n\r\n      await contract.methods\r\n        .createFarm(\r\n          tokenAddress,\r\n          expectedLiquidity,\r\n          pair2Address,\r\n          multiplier,\r\n          startBlock,\r\n          bonusEndBlock,\r\n          bonusAmount\r\n        )\r\n        .send({ from: props.account, gas: 1000000 });\r\n    } else {\r\n      alert(\"contract is null\");\r\n    }\r\n\r\n    console.log(\r\n      \"dataaaaa\",\r\n      tokenAddress,\r\n      pair2Address,\r\n      startDate,\r\n      startBlock,\r\n      multiplier,\r\n      endDate,\r\n      bonusEndBlock,\r\n      bonusEndBlock\r\n    );\r\n  };\r\n\r\n  const renderPart1 = () => {\r\n    return (\r\n      <Container style={{}}>\r\n        <Col>\r\n          <span>\r\n            <strong>Paste token address</strong>\r\n          </span>\r\n          <br></br>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter Address\"\r\n            style={{\r\n              padding: 10,\r\n              width: \"100%\",\r\n              borderRadius: 22,\r\n              fontSize: 18,\r\n              borderColor: \"gray\",\r\n              borderWidth: 0.8,\r\n            }}\r\n            value={tokenAddress}\r\n            onChange={(t) => {\r\n              setTokenAddress(t.target.value);\r\n            }}\r\n          />\r\n          <br></br>\r\n\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Expected Liquidity\"\r\n            style={{\r\n              padding: 10,\r\n              width: \"100%\",\r\n              marginTop: 10,\r\n              borderRadius: 22,\r\n              fontSize: 18,\r\n              borderColor: \"gray\",\r\n              borderWidth: 0.8,\r\n            }}\r\n            value={expectedLiquidity}\r\n            onChange={(t) => {\r\n              setExpectedLiquidity(t.target.value);\r\n            }}\r\n          />\r\n          <br></br>\r\n\r\n          <div\r\n            className=\"row\"\r\n            style={{\r\n              alignContent: \"center\",\r\n              justifyContent: \"center\",\r\n              marginTop: 10,\r\n            }}\r\n          >\r\n            <button\r\n              onClick={() => {\r\n                setFormStep(formStep - 1);\r\n                props.onPopupClosed();\r\n              }}\r\n              style={{\r\n                padding: 8,\r\n                flex: 1,\r\n                borderRadius: 22,\r\n                fontSize: 18,\r\n                paddingRight: 10,\r\n                paddingLeft: 10,\r\n                color: \"#fff\",\r\n                fontSize: \"bold\",\r\n                backgroundColor: \"red\",\r\n                borderWidth: 0.8,\r\n              }}\r\n            >\r\n              Back\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => {\r\n                setFormStep(formStep + 1);\r\n              }}\r\n              style={{\r\n                flex: 1,\r\n                padding: 8,\r\n                borderRadius: 22,\r\n                fontSize: 18,\r\n                paddingRight: 10,\r\n                paddingLeft: 10,\r\n                color: \"#fff\",\r\n                fontSize: \"bold\",\r\n                backgroundColor: \"#7e53ff\",\r\n                borderWidth: 0.8,\r\n              }}\r\n            >\r\n              Continue\r\n            </button>\r\n          </div>\r\n        </Col>\r\n      </Container>\r\n    );\r\n  };\r\n\r\n  const renderPart2 = () => {\r\n    return (\r\n      <Container style={{}}>\r\n        <Col>\r\n          <span>\r\n            <strong>\r\n              {\" \"}\r\n              Paste uniswap v2 pair address that farmers can farm the yield\r\n              token on\r\n            </strong>\r\n          </span>\r\n          <br></br>\r\n\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter Address\"\r\n            style={{\r\n              padding: 10,\r\n              width: \"100%\",\r\n              borderRadius: 22,\r\n              fontSize: 18,\r\n              borderColor: \"gray\",\r\n              borderWidth: 0.8,\r\n            }}\r\n            value={pair2Address}\r\n            onChange={(t) => {\r\n              setPair2Address(t.target.value);\r\n            }}\r\n          />\r\n          <br></br>\r\n\r\n          <span>\r\n            <strong>\r\n              {\" \"}\r\n              This MUST be a valid uniswap v2 pair. The contract checks this is\r\n              a uniswap pair on farm creation. If it is not the script will\r\n              revert.\r\n            </strong>\r\n          </span>\r\n\r\n          <div\r\n            className=\"row\"\r\n            style={{\r\n              alignContent: \"center\",\r\n              justifyContent: \"center\",\r\n              marginTop: 10,\r\n            }}\r\n          >\r\n            <button\r\n              onClick={() => {\r\n                setFormStep(formStep - 1);\r\n              }}\r\n              style={{\r\n                padding: 8,\r\n                flex: 1,\r\n                borderRadius: 22,\r\n                fontSize: 18,\r\n                paddingRight: 10,\r\n                paddingLeft: 10,\r\n                color: \"#fff\",\r\n                fontSize: \"bold\",\r\n                backgroundColor: \"red\",\r\n                borderWidth: 0.8,\r\n              }}\r\n            >\r\n              Back\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => {\r\n                setFormStep(formStep + 1);\r\n              }}\r\n              style={{\r\n                flex: 1,\r\n\r\n                padding: 8,\r\n                borderRadius: 22,\r\n                fontSize: 18,\r\n                paddingRight: 10,\r\n                paddingLeft: 10,\r\n                color: \"#fff\",\r\n                fontSize: \"bold\",\r\n                backgroundColor: \"#7e53ff\",\r\n                borderWidth: 0.8,\r\n              }}\r\n            >\r\n              Continue\r\n            </button>\r\n          </div>\r\n        </Col>\r\n      </Container>\r\n    );\r\n  };\r\n\r\n  const renderPart3 = () => {\r\n    return (\r\n      <Container style={{}}>\r\n        <Col>\r\n          <span>\r\n            <strong>\r\n              We reccommend a start block at least 24 hours in advance to give\r\n              people time to get ready to farm.\r\n            </strong>\r\n          </span>\r\n          <br></br>\r\n          <input\r\n            type=\"date\"\r\n            placeholder=\"Enter Date\"\r\n            style={{\r\n              padding: 10,\r\n              width: \"100%\",\r\n              borderRadius: 22,\r\n              fontSize: 18,\r\n              borderColor: \"gray\",\r\n              borderWidth: 0.8,\r\n            }}\r\n            value={startDate}\r\n            onChange={(t) => {\r\n              setStartDate(t.target.value);\r\n            }}\r\n          />\r\n          <br></br>\r\n\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter Block\"\r\n            style={{\r\n              padding: 10,\r\n              width: \"100%\",\r\n              borderRadius: 22,\r\n              marginTop: 8,\r\n              fontSize: 18,\r\n              borderColor: \"gray\",\r\n              borderWidth: 0.8,\r\n            }}\r\n            value={startBlock}\r\n            onChange={(t) => {\r\n              setStartBlock(t.target.value);\r\n            }}\r\n          />\r\n          <br></br>\r\n\r\n          <div\r\n            className=\"row\"\r\n            style={{\r\n              alignContent: \"center\",\r\n              justifyContent: \"center\",\r\n              marginTop: 10,\r\n            }}\r\n          >\r\n            <button\r\n              onClick={() => {\r\n                setFormStep(formStep - 1);\r\n              }}\r\n              style={{\r\n                padding: 8,\r\n                flex: 1,\r\n                borderRadius: 22,\r\n                fontSize: 18,\r\n                paddingRight: 10,\r\n                paddingLeft: 10,\r\n                color: \"#fff\",\r\n                fontSize: \"bold\",\r\n                backgroundColor: \"red\",\r\n                borderWidth: 0.8,\r\n              }}\r\n            >\r\n              Back\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => {\r\n                setFormStep(formStep + 1);\r\n              }}\r\n              style={{\r\n                flex: 1,\r\n\r\n                padding: 8,\r\n                borderRadius: 22,\r\n                fontSize: 18,\r\n                paddingRight: 10,\r\n                paddingLeft: 10,\r\n                color: \"#fff\",\r\n                fontSize: \"bold\",\r\n                backgroundColor: \"#7e53ff\",\r\n                borderWidth: 0.8,\r\n              }}\r\n            >\r\n              Continue\r\n            </button>\r\n          </div>\r\n        </Col>\r\n      </Container>\r\n    );\r\n  };\r\n\r\n  const renderPart4 = () => {\r\n    return (\r\n      <Container style={{}}>\r\n        <Col>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Multiplier (1x)\"\r\n            style={{\r\n              padding: 10,\r\n              width: \"100%\",\r\n              borderRadius: 22,\r\n              fontSize: 18,\r\n              borderColor: \"gray\",\r\n              borderWidth: 0.8,\r\n            }}\r\n            value={multiplier}\r\n            onChange={(t) => {\r\n              setMultiplier(t.target.value);\r\n            }}\r\n          />\r\n          <br></br>\r\n\r\n          <span>\r\n            <strong>\r\n              Bonus periods start at the start block and end at the below\r\n              specified block. For no bonus period set the multiplier to '1' and\r\n              the bonus end block to 11484140\r\n            </strong>\r\n          </span>\r\n          <br></br>\r\n\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Bonus Amount\"\r\n            style={{\r\n              padding: 10,\r\n              width: \"100%\",\r\n              borderRadius: 22,\r\n              fontSize: 18,\r\n              borderColor: \"gray\",\r\n              borderWidth: 0.8,\r\n            }}\r\n            value={bonusAmount}\r\n            onChange={(t) => {\r\n              setBonusAmount(t.target.value);\r\n            }}\r\n          />\r\n          <br></br>\r\n\r\n          <input\r\n            type=\"date\"\r\n            placeholder=\"Bonus end date\"\r\n            style={{\r\n              padding: 10,\r\n              width: \"100%\",\r\n              borderRadius: 22,\r\n              marginTop: 8,\r\n              fontSize: 18,\r\n              borderColor: \"gray\",\r\n              borderWidth: 0.8,\r\n            }}\r\n            value={bonusEndDate}\r\n            onChange={(t) => {\r\n              setBonusEndDate(t.target.value);\r\n            }}\r\n          />\r\n          <br></br>\r\n\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Bonus end block\"\r\n            style={{\r\n              padding: 10,\r\n              width: \"100%\",\r\n              borderRadius: 22,\r\n              marginTop: 8,\r\n              fontSize: 18,\r\n              borderColor: \"gray\",\r\n              borderWidth: 0.8,\r\n            }}\r\n            value={bonusEndBlock}\r\n            onChange={(t) => {\r\n              setBonusEndBlock(t.target.value);\r\n            }}\r\n          />\r\n          <br></br>\r\n\r\n          <div\r\n            className=\"row\"\r\n            style={{\r\n              alignContent: \"center\",\r\n              justifyContent: \"center\",\r\n              marginTop: 10,\r\n            }}\r\n          >\r\n            <button\r\n              onClick={() => {\r\n                setFormStep(formStep - 1);\r\n              }}\r\n              style={{\r\n                padding: 8,\r\n                flex: 1,\r\n                borderRadius: 22,\r\n                fontSize: 18,\r\n                paddingRight: 10,\r\n                paddingLeft: 10,\r\n                color: \"#fff\",\r\n                fontSize: \"bold\",\r\n                backgroundColor: \"red\",\r\n                borderWidth: 0.8,\r\n              }}\r\n            >\r\n              Back\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => {\r\n                setFormStep(formStep + 1);\r\n              }}\r\n              style={{\r\n                flex: 1,\r\n\r\n                padding: 8,\r\n                borderRadius: 22,\r\n                fontSize: 18,\r\n                paddingRight: 10,\r\n                paddingLeft: 10,\r\n                color: \"#fff\",\r\n                fontSize: \"bold\",\r\n                backgroundColor: \"#7e53ff\",\r\n                borderWidth: 0.8,\r\n              }}\r\n            >\r\n              Continue\r\n            </button>\r\n          </div>\r\n        </Col>\r\n      </Container>\r\n    );\r\n  };\r\n\r\n  const renderPart5 = () => {\r\n    return (\r\n      <>\r\n        <input\r\n          type=\"date\"\r\n          placeholder=\"Date\"\r\n          style={{\r\n            padding: 10,\r\n            width: \"100%\",\r\n            borderRadius: 22,\r\n            marginTop: 8,\r\n            fontSize: 18,\r\n            borderColor: \"gray\",\r\n            borderWidth: 0.8,\r\n          }}\r\n          value={endDate}\r\n          onChange={(t) => {\r\n            setEndDate(t.target.value);\r\n          }}\r\n        />\r\n        <br></br>\r\n\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Block Number\"\r\n          style={{\r\n            padding: 10,\r\n            width: \"100%\",\r\n            borderRadius: 22,\r\n            marginTop: 8,\r\n            fontSize: 18,\r\n            borderColor: \"gray\",\r\n            borderWidth: 0.8,\r\n          }}\r\n          value={endBlock}\r\n          onChange={(t) => {\r\n            setEndBlock(t.target.value);\r\n          }}\r\n        />\r\n        <div\r\n          className=\"row\"\r\n          style={{\r\n            alignContent: \"center\",\r\n            justifyContent: \"center\",\r\n            marginTop: 10,\r\n          }}\r\n        >\r\n          <button\r\n            onClick={() => {\r\n              setFormStep(formStep - 1);\r\n            }}\r\n            style={{\r\n              padding: 8,\r\n              flex: 1,\r\n              borderRadius: 22,\r\n              fontSize: 18,\r\n              paddingRight: 10,\r\n              paddingLeft: 10,\r\n              color: \"#fff\",\r\n              fontSize: \"bold\",\r\n              backgroundColor: \"red\",\r\n              borderWidth: 0.8,\r\n            }}\r\n          >\r\n            Back\r\n          </button>\r\n\r\n          <button\r\n            onClick={() => {\r\n              submitForm();\r\n            }}\r\n            style={{\r\n              flex: 1,\r\n\r\n              padding: 8,\r\n              borderRadius: 22,\r\n              fontSize: 18,\r\n              paddingRight: 10,\r\n              paddingLeft: 10,\r\n              color: \"#fff\",\r\n              fontSize: \"bold\",\r\n              backgroundColor: \"#7e53ff\",\r\n              borderWidth: 0.8,\r\n            }}\r\n          >\r\n            Continue\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const renderFormPart = (partNumber) => {\r\n    switch (partNumber) {\r\n      case 1:\r\n        return renderPart1();\r\n      case 2:\r\n        return renderPart2();\r\n\r\n      case 3:\r\n        return renderPart3();\r\n\r\n      case 4:\r\n        return renderPart4();\r\n\r\n      case 5:\r\n        return renderPart5();\r\n    }\r\n  };\r\n\r\n  const renderPart2Modal = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          marginBottom: 10,\r\n        }}\r\n      >\r\n        <Arrows\r\n          model={{\r\n            steps: [\r\n              { label: \"Farm which token?\" },\r\n              { label: \"Select uniswap pair\" },\r\n              { label: \"Start Block\" },\r\n\r\n              { label: \"1x Bonus\" },\r\n              { label: \"End Block\" },\r\n            ],\r\n            current: formStep - 1,\r\n          }}\r\n        />\r\n        ;{renderFormPart(formStep)}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderModal = () => {\r\n    return (\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        onAfterOpen={afterOpenModal}\r\n        onRequestClose={closeModal}\r\n        style={customStyles}\r\n        shouldCloseOnOverlayClick={false}\r\n        contentLabel=\"Example Modal\"\r\n      >\r\n        <div\r\n          className=\"row\"\r\n          style={{\r\n            borderBottom: \"1px #b2afaf solid\",\r\n          }}\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            className=\"backBtn v-btn v-btn--flat v-btn--icon v-btn--round theme--light v-size--default\"\r\n          >\r\n            <span className=\"v-btn__content\">\r\n              <i\r\n                aria-hidden=\"true\"\r\n                className=\"v-icon notranslate mdi mdi-arrow-left theme--light\"\r\n              />\r\n            </span>\r\n          </button>\r\n\r\n          <div\r\n            style={{\r\n              textAlign: \"center\",\r\n              flex: 1,\r\n            }}\r\n          >\r\n            <h2> Launch a Farm </h2>\r\n\r\n            <p>Current block: 11465157</p>\r\n          </div>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"backBtn v-btn v-btn--flat v-btn--icon v-btn--round theme--light v-size--default\"\r\n          >\r\n            <span className=\"v-btn__content\">\r\n              <i\r\n                aria-hidden=\"true\"\r\n                className=\"v-icon notranslate mdi mdi-arrow-left theme--light\"\r\n              />\r\n            </span>\r\n          </button>\r\n        </div>\r\n\r\n        {isPopUpFirstPage ? (\r\n          <div style={{ marginLeft: 20, marginRight: 20 }}>\r\n            <span style={{ fontSize: 30 }}>\r\n              Launching a farm on a uniswap pair is now incredibly simple. You\r\n              deposit the reward token into a vault contract, set the start\r\n              block, endblock, and bonus period -And your done!\r\n            </span>\r\n\r\n            <div className=\"caption mt-3\" style={{ marginBottom: 10 }}>\r\n              {\" \"}\r\n              A farming contract is final. You cannot change{\" \"}\r\n              <span className=\"font-weight-bold\">any</span> paramaters once\r\n              initialised. There is no way to remove tokens other than farm them\r\n              out over the set period. You cannot increase rewards either\r\n              although you may create additional farms.{\" \"}\r\n              <div className=\"font-weight-bold mt-3\">\r\n                {\" \"}\r\n                Do not use this with{\" \"}\r\n              </div>\r\n              <div className=\"d-flex align-start\">\r\n                <i\r\n                  aria-hidden=\"true\"\r\n                  className=\"v-icon notranslate mt-1 mr-2 mdi mdi-circle theme--light\"\r\n                  style={{ fontSize: \"12px\" }}\r\n                />\r\n                <div>\r\n                  {\" \"}\r\n                  Rebasing tokens or any 'hack' on how a ERC20 token should\r\n                  function.{\" \"}\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex align-start\">\r\n                <i\r\n                  aria-hidden=\"true\"\r\n                  className=\"v-icon notranslate mt-1 mr-2 mdi mdi-circle theme--light\"\r\n                  style={{ fontSize: \"12px\" }}\r\n                />\r\n                <div> Fee to sender tokens </div>\r\n              </div>\r\n              <div className=\"d-flex align-start\">\r\n                <i\r\n                  aria-hidden=\"true\"\r\n                  className=\"v-icon notranslate mt-1 mr-2 mdi mdi-circle theme--light\"\r\n                  style={{ fontSize: \"12px\" }}\r\n                />\r\n                <div>\r\n                  {\" \"}\r\n                  We reserve the right to delist your farm from our front end\r\n                  app if you dont adhere to these token specifications as it\r\n                  will affect farmers.{\" \"}\r\n                </div>\r\n              </div>\r\n              <div className=\"mt-3\">\r\n                {\" \"}\r\n                Essentially 1 token must always equal 1 token. If you send\r\n                someone one token and they recieve less than one token you wont\r\n                be able to generate a farm. For the rest of the 99% of normal\r\n                ERC20 tokens with no weird transfer functions or magically\r\n                changing balances (rebasing), this platform is for you.{\" \"}\r\n              </div>\r\n              <div className=\"mt-3 primary--text\">\r\n                {\" \"}\r\n                Feel free to email Mark at email for help setting up your farm.{\" \"}\r\n              </div>\r\n            </div>\r\n\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setPopUpFirstPage(false);\r\n                setFormStep(1);\r\n              }}\r\n              className=\"continueBtn v-btn v-btn--block v-btn--depressed v-btn--rounded theme--light v-size--x-large primary\"\r\n            >\r\n              <span className=\"v-btn__content\"> Continue </span>\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n\r\n        {formStep > 0 ? renderPart2Modal() : null}\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <center className=\"center-div\">\r\n        <div className=\"jumbotron\" id=\"ticket\">\r\n          <h1 style={{ fontWeight: \"bold\", color: \"#fff\" }}>$630k</h1>\r\n          <p style={{ fontWeight: \"bold\", color: \"#fff\" }}>\r\n            Total farming liquidity\r\n          </p>\r\n          <hr />\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-6\"></div>\r\n\r\n            {renderModal()}\r\n\r\n            <div className=\"col-sm-6\">\r\n              <button\r\n                className=\"btn btn-primary btn-lg\"\r\n                data-toggle=\"modal\"\r\n                data-target=\"#myWallet\"\r\n                style={{ background: \"none\", border: \"1px solid #fff\" }}\r\n              >\r\n                Create Farm\r\n              </button>\r\n              <button\r\n                className=\"btn btn-primary btn-lg\"\r\n                style={{ background: \"none\", border: \"1px solid #fff\" }}\r\n              >\r\n                <span className=\"fa fa-circle-o\"></span>\r\n                <span className=\"fa fa-sort\"></span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </center>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Navigate\\Navigate.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Modal\\Modal.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Token\\Token.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCard.js",["119"],"import React from \"react\";\r\nimport FormCardHeader from \"./FormCardHeader\";\r\nimport FormCardDes from \"./FormCardDes\";\r\nimport FormCardFooter from \"./FormCardFooter\";\r\nimport FooterTabsView from \"./FooterTabsView\";\r\nimport \"./FormCard.css\";\r\n\r\nconst FormCard = ({ data }) => {\r\n  console.log(data)\r\n  const {lpToken} = data;\r\n  const [value, setValue] = React.useState(false);\r\n  const clickHandler = () => {\r\n    setValue(!value);\r\n    console.log(!value);\r\n  };\r\n  return (\r\n    <div className=\"formContainer\">\r\n      <div onClick={clickHandler}>\r\n        <FormCardHeader />\r\n        <FormCardDes  />\r\n        <FormCardFooter />\r\n      </div>\r\n      {value && <FooterTabsView data={data}/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormCard;\r\n","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Account\\Account.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardHeader.js",["120"],"import React from \"react\";\r\nimport headerLogo from \"./images/headerLogo.png\";\r\nimport \"./FormCardHeader.css\";\r\n\r\nconst FormCardHeader = () => {\r\n  return (\r\n    <div className=\"cardHeaderContainer\">\r\n      <div className=\"headerLogo\">\r\n        <img src={headerLogo} height=\"35\" />\r\n      </div>\r\n      <div className=\"titleSubtitle\">\r\n        <h2>Farm UNCL</h2>\r\n        <p>UNCX / WETH</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormCardHeader;\r\n","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardDes.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardFooter.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FooterTabsView.js",[],"C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCards.js",["121","122"],"import React from \"react\";\r\nimport headerLogo from \"./images/headerLogo.png\";\r\nimport \"./HiddenCards.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n\r\nexport const HiddenCards = ({ lpToken }) => {\r\n  const myInput = uuidv4();\r\n  const clickCopyHandler = () => {\r\n    var elemToCopy = document.getElementById(myInput);\r\n    const textToCopy = elemToCopy.innerText;\r\n    alert(\"Copy\");\r\n    navigator.clipboard.writeText(textToCopy).then(\r\n      function () {\r\n        console.log(\"Async: Copying to clipboard was successful!\");\r\n      },\r\n      function (err) {\r\n        console.error(\"Async: Could not copy text: \", err);\r\n      }\r\n    );\r\n  };\r\n\r\n  \r\n  return (\r\n    <div className=\"hiddenCardContainer\">\r\n      <div className=\"cardLogo\">\r\n        <img src={headerLogo} height=\"35\" />\r\n      </div>\r\n      <div className=\"cardDetail\">\r\n        <p>Uniswap pair</p>\r\n        <h2>UNCX / WETH</h2>\r\n        <button onClick={clickCopyHandler} >\r\n         <span className=\"ip-btn\" id={myInput}> {lpToken}</span>\r\n\r\n          <i class=\"fa fa-clone\" aria-hidden=\"true\"></i>\r\n        </button>\r\n        <br />\r\n        <a href=\"#\"> view on Uniswap</a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HiddenCards;\r\n","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\StakeData.js",["123","124"],"import React from \"react\";\r\nimport headerLogo from \"./images/headerLogo.png\";\r\nimport \"./StakeData.css\";\r\n\r\nconst StakeData = () => {\r\n  return (\r\n    <div className=\"stakeDataContainer\">\r\n      <div className=\"stakeHeader\">\r\n      <div>\r\n        <img src={headerLogo} height=\"35\" />\r\n        <h2>UNCX</h2>\r\n        </div>\r\n        <div>\r\n        <img src={headerLogo} height=\"35\" />\r\n        <h2>WETH</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"stakeDes\">\r\n        <p>You need UniV2 liquidity tokens to farm this pool</p>\r\n      </div>\r\n      <div className=\"stakeFooter\">\r\n        <i className=\"fa fa-paw\" aria-hidden=\"true\"></i>\r\n        <p>Get liquidity tokens</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StakeData;\r\n","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCards2.js",["125"],"import React from \"react\";\r\nimport headerLogo from \"./images/headerLogo.png\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport \"./HiddenCards.css\";\r\n\r\nexport const HiddenCards2 = ({ rewardToken }) => {\r\n  const textElemId = uuidv4();\r\n  const clickCopyHandler = () => {\r\n    var elemToCopy = document.getElementById(textElemId);\r\n    const textToCopy = elemToCopy.innerText;\r\n    alert(\"Copy\")\r\n    navigator.clipboard.writeText(textToCopy).then(\r\n      function () {\r\n        console.log(\"Async: Copying to clipboard was successful!\");\r\n      },\r\n      function (err) {\r\n        console.error(\"Async: Could not copy text: \", err);\r\n      }\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"hiddenCardContainer\">\r\n      <div className=\"cardLogo\">\r\n        <img src={headerLogo} height=\"35\" />\r\n      </div>\r\n      <div className=\"cardDetail\">\r\n        <p>Uniswap pair</p>\r\n        <h2>UNCX / WETH</h2>\r\n        <button onClick={clickCopyHandler}>\r\n          <span className=\"ip-btn\" id={textElemId}>\r\n            {rewardToken}\r\n          </span>\r\n          <i class=\"fa fa-clone\" aria-hidden=\"true\"></i>\r\n        </button>\r\n        <br />\r\n        <a href=\"https://etherscan.io/address/0x2f4eb47A1b1F4488C71fc10e39a4aa56AF33Dd49\">\r\n          {\" \"}\r\n          view on Uniswap\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HiddenCards2;\r\n","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCards3.js",["126","127"],"import React, { useState } from \"react\";\r\nimport headerLogo from \"./images/headerLogo.png\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport \"./HiddenCards.css\";\r\n\r\nexport const HiddenCards3 = ({ address }) => {\r\n\r\n  const textElemId2 = uuidv4();\r\n  const clickCopyHandler = () => {\r\n    var elemToCopy = document.getElementById(textElemId2);\r\n    const textToCopy = elemToCopy.innerText;\r\n    alert(\"Copy\");\r\n    navigator.clipboard.writeText(textToCopy).then(\r\n      function () {\r\n        console.log(\"Async: Copying to clipboard was successful!\");\r\n      },\r\n      function (err) {\r\n        console.error(\"Async: Could not copy text: \", err);\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"hiddenCardContainer\">\r\n      <div className=\"cardLogo\">\r\n        <img src={headerLogo} height=\"35\" />\r\n      </div>\r\n      <div className=\"cardDetail\">\r\n        <p>Uniswap pair</p>\r\n        <h2>UNCX / WETH</h2>\r\n        \r\n          <button onClick={clickCopyHandler}>\r\n            <span\r\n              className=\"ip-btn\"\r\n              id={textElemId2}\r\n            >\r\n              {address}\r\n            </span>\r\n            <i class=\"fa fa-clone\" aria-hidden=\"true\"></i>\r\n          </button>\r\n      \r\n        <br />\r\n        <a href=\"https://etherscan.io/\" target=\"blank\">\r\n          Etherscan\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HiddenCards3;\r\n","C:\\Users\\merab\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCardInfo.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":4,"column":8,"nodeType":"134","messageId":"135","endLine":4,"endColumn":16},{"ruleId":"132","severity":1,"message":"136","line":8,"column":10,"nodeType":"134","messageId":"135","endLine":8,"endColumn":13},{"ruleId":"132","severity":1,"message":"137","line":45,"column":10,"nodeType":"134","messageId":"135","endLine":45,"endColumn":22},{"ruleId":"132","severity":1,"message":"138","line":45,"column":24,"nodeType":"134","messageId":"135","endLine":45,"endColumn":39},{"ruleId":"139","severity":1,"message":"140","line":173,"column":17,"nodeType":"141","messageId":"142","endLine":173,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":193,"column":17,"nodeType":"141","messageId":"142","endLine":193,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":266,"column":17,"nodeType":"141","messageId":"142","endLine":266,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":287,"column":17,"nodeType":"141","messageId":"142","endLine":287,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":368,"column":17,"nodeType":"141","messageId":"142","endLine":368,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":389,"column":17,"nodeType":"141","messageId":"142","endLine":389,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":509,"column":17,"nodeType":"141","messageId":"142","endLine":509,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":530,"column":17,"nodeType":"141","messageId":"142","endLine":530,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":602,"column":15,"nodeType":"141","messageId":"142","endLine":602,"endColumn":23},{"ruleId":"139","severity":1,"message":"140","line":623,"column":15,"nodeType":"141","messageId":"142","endLine":623,"endColumn":23},{"ruleId":"143","severity":1,"message":"144","line":636,"column":5,"nodeType":"145","messageId":"146","endLine":650,"endColumn":6},{"ruleId":"132","severity":1,"message":"147","line":10,"column":10,"nodeType":"134","messageId":"135","endLine":10,"endColumn":17},{"ruleId":"148","severity":1,"message":"149","line":9,"column":9,"nodeType":"150","endLine":9,"endColumn":45},{"ruleId":"148","severity":1,"message":"149","line":27,"column":9,"nodeType":"150","endLine":27,"endColumn":45},{"ruleId":"151","severity":1,"message":"152","line":38,"column":9,"nodeType":"150","endLine":38,"endColumn":21},{"ruleId":"148","severity":1,"message":"149","line":10,"column":9,"nodeType":"150","endLine":10,"endColumn":45},{"ruleId":"148","severity":1,"message":"149","line":14,"column":9,"nodeType":"150","endLine":14,"endColumn":45},{"ruleId":"148","severity":1,"message":"149","line":24,"column":9,"nodeType":"150","endLine":24,"endColumn":45},{"ruleId":"132","severity":1,"message":"153","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"148","severity":1,"message":"149","line":27,"column":9,"nodeType":"150","endLine":27,"endColumn":45},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'endBlockDate' is assigned a value but never used.","'setEndBlockDate' is assigned a value but never used.","no-dupe-keys","Duplicate key 'fontSize'.","ObjectExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'lpToken' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]