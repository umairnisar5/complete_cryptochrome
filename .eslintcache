[{"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\index.js":"1","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\reportWebVitals.js":"2","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\store\\store.js":"3","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\container\\App.js":"4","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\config.js":"5","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\store\\reducers\\home.js":"6","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\utils\\contract.js":"7","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Token\\Token.js":"8","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Navigate\\Navigate.js":"9","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Modal\\Modal.js":"10","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Account\\Account.js":"11","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Index\\Index.js":"12","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCard.js":"13","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Navbar\\Navbar.js":"14","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardHeader.js":"15","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardFooter.js":"16","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardDes.js":"17","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FooterTabsView.js":"18","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCards2.js":"19","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\StakeData.js":"20","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCardInfo.js":"21","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCards.js":"22","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCards3.js":"23"},{"size":725,"mtime":1608992322219,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1608827692230,"results":"26","hashOfConfig":"25"},{"size":124,"mtime":1608992271669,"results":"27","hashOfConfig":"25"},{"size":4039,"mtime":1609003131150,"results":"28","hashOfConfig":"25"},{"size":5392,"mtime":1608925940548,"results":"29","hashOfConfig":"25"},{"size":229,"mtime":1608999608789,"results":"30","hashOfConfig":"25"},{"size":562,"mtime":1608925945725,"results":"31","hashOfConfig":"25"},{"size":556,"mtime":1608925472068,"results":"32","hashOfConfig":"25"},{"size":782,"mtime":1609099247717,"results":"33","hashOfConfig":"25"},{"size":2288,"mtime":1608827692549,"results":"34","hashOfConfig":"25"},{"size":749,"mtime":1608827692327,"results":"35","hashOfConfig":"25"},{"size":22770,"mtime":1609092311146,"results":"36","hashOfConfig":"25"},{"size":742,"mtime":1609003801763,"results":"37","hashOfConfig":"25"},{"size":1570,"mtime":1609095798137,"results":"38","hashOfConfig":"25"},{"size":461,"mtime":1608925978928,"results":"39","hashOfConfig":"25"},{"size":562,"mtime":1608925975812,"results":"40","hashOfConfig":"25"},{"size":231,"mtime":1608925971725,"results":"41","hashOfConfig":"25"},{"size":3620,"mtime":1609007809640,"results":"42","hashOfConfig":"25"},{"size":1352,"mtime":1609058471361,"results":"43","hashOfConfig":"25"},{"size":749,"mtime":1609019252118,"results":"44","hashOfConfig":"25"},{"size":3578,"mtime":1609059093876,"results":"45","hashOfConfig":"25"},{"size":1205,"mtime":1609088862391,"results":"46","hashOfConfig":"25"},{"size":1384,"mtime":1609088775952,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"d8n6ic",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\index.js",[],["102","103"],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\reportWebVitals.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\store\\store.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\container\\App.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\config.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\store\\reducers\\home.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\utils\\contract.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Token\\Token.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Navigate\\Navigate.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Modal\\Modal.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Account\\Account.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Index\\Index.js",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118"],"import React, { useState, useEffect } from \"react\";\nimport \"./Index.css\";\nimport \"./pop.css\";\nimport ReactDOM from \"react-dom\";\nimport Modal from \"react-modal\";\nimport \"../../../node_modules/awesome-react-steps/lib/css/arrows.css\";\nimport { Arrows } from \"awesome-react-steps\";\nimport { Row, Col, Container } from \"react-bootstrap\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    width: \"40%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    borderRadius: \"30px\",\n    padding: \"20px\",\n  },\n};\nModal.defaultStyles.overlay.backgroundColor = \"#00000087\";\n\n// Modal.setAppElement('#yourAppElement')\n\nexport default function Index(props) {\n  const [contract, setContract] = useState();\n\n  const [isPopUpFirstPage, setPopUpFirstPage] = useState(true);\n  const [formStep, setFormStep] = useState(0);\n\n  const [tokenAddress, setTokenAddress] = useState(\"\");\n  const [pair2Address, setPair2Address] = useState(\"\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [startBlock, setStartBlock] = useState(\"\");\n  const [multiplier, setMultiplier] = useState(1);\n  const [endDate, setEndDate] = useState(\"\");\n  const [expectedLiquidity, setExpectedLiquidity] = useState(\"\");\n\n  const [bonusEndDate, setBonusEndDate] = useState(\"\");\n  const [bonusEndBlock, setBonusEndBlock] = useState(\"\");\n  const [bonusAmount, setBonusAmount] = useState(\"\");\n\n  const [endBlockDate, setEndBlockDate] = useState(\"\");\n  const [endBlock, setEndBlock] = useState(\"\");\n\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n\n  useEffect(() => {\n    setIsOpen(props.isCreateFarmModalOpen);\n  }, [props.isCreateFarmModalOpen]);\n\n  useEffect(() => {\n    setContract(props.contract);\n  }, [props.contract]);\n\n  function afterOpenModal() {\n    // references are now sync'd and can be accessed.\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  const submitForm = async () => {\n    if (contract) {\n      console.log(\n        \"functios\",\n        tokenAddress,\n        expectedLiquidity,\n        pair2Address,\n        multiplier,\n        startBlock,\n        bonusEndBlock,\n        bonusAmount\n      );\n\n      await contract.methods\n        .createFarm(\n          tokenAddress,\n          expectedLiquidity,\n          pair2Address,\n          multiplier,\n          startBlock,\n          bonusEndBlock,\n          bonusAmount\n        )\n        .send({ from: props.account, gas: 1000000 });\n    } else {\n      alert(\"contract is null\");\n    }\n\n    console.log(\n      \"dataaaaa\",\n      tokenAddress,\n      pair2Address,\n      startDate,\n      startBlock,\n      multiplier,\n      endDate,\n      bonusEndBlock,\n      bonusEndBlock\n    );\n  };\n\n  const renderPart1 = () => {\n    return (\n      <Container style={{}}>\n        <Col>\n          <span>\n            <strong>Paste token address</strong>\n          </span>\n          <br></br>\n          <input\n            type=\"text\"\n            placeholder=\"Enter Address\"\n            style={{\n              padding: 10,\n              width: \"100%\",\n              borderRadius: 22,\n              fontSize: 18,\n              borderColor: \"gray\",\n              borderWidth: 0.8,\n            }}\n            value={tokenAddress}\n            onChange={(t) => {\n              setTokenAddress(t.target.value);\n            }}\n          />\n          <br></br>\n\n          <input\n            type=\"text\"\n            placeholder=\"Expected Liquidity\"\n            style={{\n              padding: 10,\n              width: \"100%\",\n              marginTop: 10,\n              borderRadius: 22,\n              fontSize: 18,\n              borderColor: \"gray\",\n              borderWidth: 0.8,\n            }}\n            value={expectedLiquidity}\n            onChange={(t) => {\n              setExpectedLiquidity(t.target.value);\n            }}\n          />\n          <br></br>\n\n          <div\n            className=\"row\"\n            style={{\n              alignContent: \"center\",\n              justifyContent: \"center\",\n              marginTop: 10,\n            }}\n          >\n            <button\n              onClick={() => {\n                setFormStep(formStep - 1);\n                props.onPopupClosed();\n              }}\n              style={{\n                padding: 8,\n                flex: 1,\n                borderRadius: 22,\n                fontSize: 18,\n                paddingRight: 10,\n                paddingLeft: 10,\n                color: \"#fff\",\n                fontSize: \"bold\",\n                backgroundColor: \"red\",\n                borderWidth: 0.8,\n              }}\n            >\n              Back\n            </button>\n\n            <button\n              onClick={() => {\n                setFormStep(formStep + 1);\n              }}\n              style={{\n                flex: 1,\n                padding: 8,\n                borderRadius: 22,\n                fontSize: 18,\n                paddingRight: 10,\n                paddingLeft: 10,\n                color: \"#fff\",\n                fontSize: \"bold\",\n                backgroundColor: \"#7e53ff\",\n                borderWidth: 0.8,\n              }}\n            >\n              Continue\n            </button>\n          </div>\n        </Col>\n      </Container>\n    );\n  };\n\n  const renderPart2 = () => {\n    return (\n      <Container style={{}}>\n        <Col>\n          <span>\n            <strong>\n              {\" \"}\n              Paste uniswap v2 pair address that farmers can farm the yield\n              token on\n            </strong>\n          </span>\n          <br></br>\n\n          <input\n            type=\"text\"\n            placeholder=\"Enter Address\"\n            style={{\n              padding: 10,\n              width: \"100%\",\n              borderRadius: 22,\n              fontSize: 18,\n              borderColor: \"gray\",\n              borderWidth: 0.8,\n            }}\n            value={pair2Address}\n            onChange={(t) => {\n              setPair2Address(t.target.value);\n            }}\n          />\n          <br></br>\n\n          <span>\n            <strong>\n              {\" \"}\n              This MUST be a valid uniswap v2 pair. The contract checks this is\n              a uniswap pair on farm creation. If it is not the script will\n              revert.\n            </strong>\n          </span>\n\n          <div\n            className=\"row\"\n            style={{\n              alignContent: \"center\",\n              justifyContent: \"center\",\n              marginTop: 10,\n            }}\n          >\n            <button\n              onClick={() => {\n                setFormStep(formStep - 1);\n              }}\n              style={{\n                padding: 8,\n                flex: 1,\n                borderRadius: 22,\n                fontSize: 18,\n                paddingRight: 10,\n                paddingLeft: 10,\n                color: \"#fff\",\n                fontSize: \"bold\",\n                backgroundColor: \"red\",\n                borderWidth: 0.8,\n              }}\n            >\n              Back\n            </button>\n\n            <button\n              onClick={() => {\n                setFormStep(formStep + 1);\n              }}\n              style={{\n                flex: 1,\n\n                padding: 8,\n                borderRadius: 22,\n                fontSize: 18,\n                paddingRight: 10,\n                paddingLeft: 10,\n                color: \"#fff\",\n                fontSize: \"bold\",\n                backgroundColor: \"#7e53ff\",\n                borderWidth: 0.8,\n              }}\n            >\n              Continue\n            </button>\n          </div>\n        </Col>\n      </Container>\n    );\n  };\n\n  const renderPart3 = () => {\n    return (\n      <Container style={{}}>\n        <Col>\n          <span>\n            <strong>\n              We reccommend a start block at least 24 hours in advance to give\n              people time to get ready to farm.\n            </strong>\n          </span>\n          <br></br>\n          <input\n            type=\"date\"\n            placeholder=\"Enter Date\"\n            style={{\n              padding: 10,\n              width: \"100%\",\n              borderRadius: 22,\n              fontSize: 18,\n              borderColor: \"gray\",\n              borderWidth: 0.8,\n            }}\n            value={startDate}\n            onChange={(t) => {\n              setStartDate(t.target.value);\n            }}\n          />\n          <br></br>\n\n          <input\n            type=\"text\"\n            placeholder=\"Enter Block\"\n            style={{\n              padding: 10,\n              width: \"100%\",\n              borderRadius: 22,\n              marginTop: 8,\n              fontSize: 18,\n              borderColor: \"gray\",\n              borderWidth: 0.8,\n            }}\n            value={startBlock}\n            onChange={(t) => {\n              setStartBlock(t.target.value);\n            }}\n          />\n          <br></br>\n\n          <div\n            className=\"row\"\n            style={{\n              alignContent: \"center\",\n              justifyContent: \"center\",\n              marginTop: 10,\n            }}\n          >\n            <button\n              onClick={() => {\n                setFormStep(formStep - 1);\n              }}\n              style={{\n                padding: 8,\n                flex: 1,\n                borderRadius: 22,\n                fontSize: 18,\n                paddingRight: 10,\n                paddingLeft: 10,\n                color: \"#fff\",\n                fontSize: \"bold\",\n                backgroundColor: \"red\",\n                borderWidth: 0.8,\n              }}\n            >\n              Back\n            </button>\n\n            <button\n              onClick={() => {\n                setFormStep(formStep + 1);\n              }}\n              style={{\n                flex: 1,\n\n                padding: 8,\n                borderRadius: 22,\n                fontSize: 18,\n                paddingRight: 10,\n                paddingLeft: 10,\n                color: \"#fff\",\n                fontSize: \"bold\",\n                backgroundColor: \"#7e53ff\",\n                borderWidth: 0.8,\n              }}\n            >\n              Continue\n            </button>\n          </div>\n        </Col>\n      </Container>\n    );\n  };\n\n  const renderPart4 = () => {\n    return (\n      <Container style={{}}>\n        <Col>\n          <input\n            type=\"text\"\n            placeholder=\"Multiplier (1x)\"\n            style={{\n              padding: 10,\n              width: \"100%\",\n              borderRadius: 22,\n              fontSize: 18,\n              borderColor: \"gray\",\n              borderWidth: 0.8,\n            }}\n            value={multiplier}\n            onChange={(t) => {\n              setMultiplier(t.target.value);\n            }}\n          />\n          <br></br>\n\n          <span>\n            <strong>\n              Bonus periods start at the start block and end at the below\n              specified block. For no bonus period set the multiplier to '1' and\n              the bonus end block to 11484140\n            </strong>\n          </span>\n          <br></br>\n\n          <input\n            type=\"text\"\n            placeholder=\"Bonus Amount\"\n            style={{\n              padding: 10,\n              width: \"100%\",\n              borderRadius: 22,\n              fontSize: 18,\n              borderColor: \"gray\",\n              borderWidth: 0.8,\n            }}\n            value={bonusAmount}\n            onChange={(t) => {\n              setBonusAmount(t.target.value);\n            }}\n          />\n          <br></br>\n\n          <input\n            type=\"date\"\n            placeholder=\"Bonus end date\"\n            style={{\n              padding: 10,\n              width: \"100%\",\n              borderRadius: 22,\n              marginTop: 8,\n              fontSize: 18,\n              borderColor: \"gray\",\n              borderWidth: 0.8,\n            }}\n            value={bonusEndDate}\n            onChange={(t) => {\n              setBonusEndDate(t.target.value);\n            }}\n          />\n          <br></br>\n\n          <input\n            type=\"text\"\n            placeholder=\"Bonus end block\"\n            style={{\n              padding: 10,\n              width: \"100%\",\n              borderRadius: 22,\n              marginTop: 8,\n              fontSize: 18,\n              borderColor: \"gray\",\n              borderWidth: 0.8,\n            }}\n            value={bonusEndBlock}\n            onChange={(t) => {\n              setBonusEndBlock(t.target.value);\n            }}\n          />\n          <br></br>\n\n          <div\n            className=\"row\"\n            style={{\n              alignContent: \"center\",\n              justifyContent: \"center\",\n              marginTop: 10,\n            }}\n          >\n            <button\n              onClick={() => {\n                setFormStep(formStep - 1);\n              }}\n              style={{\n                padding: 8,\n                flex: 1,\n                borderRadius: 22,\n                fontSize: 18,\n                paddingRight: 10,\n                paddingLeft: 10,\n                color: \"#fff\",\n                fontSize: \"bold\",\n                backgroundColor: \"red\",\n                borderWidth: 0.8,\n              }}\n            >\n              Back\n            </button>\n\n            <button\n              onClick={() => {\n                setFormStep(formStep + 1);\n              }}\n              style={{\n                flex: 1,\n\n                padding: 8,\n                borderRadius: 22,\n                fontSize: 18,\n                paddingRight: 10,\n                paddingLeft: 10,\n                color: \"#fff\",\n                fontSize: \"bold\",\n                backgroundColor: \"#7e53ff\",\n                borderWidth: 0.8,\n              }}\n            >\n              Continue\n            </button>\n          </div>\n        </Col>\n      </Container>\n    );\n  };\n\n  const renderPart5 = () => {\n    return (\n      <>\n        <input\n          type=\"date\"\n          placeholder=\"Date\"\n          style={{\n            padding: 10,\n            width: \"100%\",\n            borderRadius: 22,\n            marginTop: 8,\n            fontSize: 18,\n            borderColor: \"gray\",\n            borderWidth: 0.8,\n          }}\n          value={endDate}\n          onChange={(t) => {\n            setEndDate(t.target.value);\n          }}\n        />\n        <br></br>\n\n        <input\n          type=\"text\"\n          placeholder=\"Block Number\"\n          style={{\n            padding: 10,\n            width: \"100%\",\n            borderRadius: 22,\n            marginTop: 8,\n            fontSize: 18,\n            borderColor: \"gray\",\n            borderWidth: 0.8,\n          }}\n          value={endBlock}\n          onChange={(t) => {\n            setEndBlock(t.target.value);\n          }}\n        />\n        <div\n          className=\"row\"\n          style={{\n            alignContent: \"center\",\n            justifyContent: \"center\",\n            marginTop: 10,\n          }}\n        >\n          <button\n            onClick={() => {\n              setFormStep(formStep - 1);\n            }}\n            style={{\n              padding: 8,\n              flex: 1,\n              borderRadius: 22,\n              fontSize: 18,\n              paddingRight: 10,\n              paddingLeft: 10,\n              color: \"#fff\",\n              fontSize: \"bold\",\n              backgroundColor: \"red\",\n              borderWidth: 0.8,\n            }}\n          >\n            Back\n          </button>\n\n          <button\n            onClick={() => {\n              submitForm();\n            }}\n            style={{\n              flex: 1,\n\n              padding: 8,\n              borderRadius: 22,\n              fontSize: 18,\n              paddingRight: 10,\n              paddingLeft: 10,\n              color: \"#fff\",\n              fontSize: \"bold\",\n              backgroundColor: \"#7e53ff\",\n              borderWidth: 0.8,\n            }}\n          >\n            Continue\n          </button>\n        </div>\n      </>\n    );\n  };\n\n  const renderFormPart = (partNumber) => {\n    switch (partNumber) {\n      case 1:\n        return renderPart1();\n      case 2:\n        return renderPart2();\n\n      case 3:\n        return renderPart3();\n\n      case 4:\n        return renderPart4();\n\n      case 5:\n        return renderPart5();\n    }\n  };\n\n  const renderPart2Modal = () => {\n    return (\n      <div\n        style={{\n          marginBottom: 10,\n        }}\n      >\n        <Arrows\n          model={{\n            steps: [\n              { label: \"Farm which token?\" },\n              { label: \"Select uniswap pair\" },\n              { label: \"Start Block\" },\n\n              { label: \"1x Bonus\" },\n              { label: \"End Block\" },\n            ],\n            current: formStep - 1,\n          }}\n        />\n        ;{renderFormPart(formStep)}\n      </div>\n    );\n  };\n\n  const renderModal = () => {\n    return (\n      <Modal\n        isOpen={modalIsOpen}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={closeModal}\n        style={customStyles}\n        shouldCloseOnOverlayClick={false}\n        contentLabel=\"Example Modal\"\n      >\n        <div\n          className=\"row\"\n          style={{\n            borderBottom: \"1px #b2afaf solid\",\n          }}\n        >\n          <button\n            type=\"button\"\n            className=\"backBtn v-btn v-btn--flat v-btn--icon v-btn--round theme--light v-size--default\"\n          >\n            <span className=\"v-btn__content\">\n              <i\n                aria-hidden=\"true\"\n                className=\"v-icon notranslate mdi mdi-arrow-left theme--light\"\n              />\n            </span>\n          </button>\n\n          <div\n            style={{\n              textAlign: \"center\",\n              flex: 1,\n            }}\n          >\n            <h2> Launch a Farm </h2>\n\n            <p>Current block: 11465157</p>\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"backBtn v-btn v-btn--flat v-btn--icon v-btn--round theme--light v-size--default\"\n          >\n            <span className=\"v-btn__content\">\n              <i\n                aria-hidden=\"true\"\n                className=\"v-icon notranslate mdi mdi-arrow-left theme--light\"\n              />\n            </span>\n          </button>\n        </div>\n\n        {isPopUpFirstPage ? (\n          <div style={{ marginLeft: 20, marginRight: 20 }}>\n            <span style={{ fontSize: 30 }}>\n              Launching a farm on a uniswap pair is now incredibly simple. You\n              deposit the reward token into a vault contract, set the start\n              block, endblock, and bonus period -And your done!\n            </span>\n\n            <div className=\"caption mt-3\" style={{ marginBottom: 10 }}>\n              {\" \"}\n              A farming contract is final. You cannot change{\" \"}\n              <span className=\"font-weight-bold\">any</span> paramaters once\n              initialised. There is no way to remove tokens other than farm them\n              out over the set period. You cannot increase rewards either\n              although you may create additional farms.{\" \"}\n              <div className=\"font-weight-bold mt-3\">\n                {\" \"}\n                Do not use this with{\" \"}\n              </div>\n              <div className=\"d-flex align-start\">\n                <i\n                  aria-hidden=\"true\"\n                  className=\"v-icon notranslate mt-1 mr-2 mdi mdi-circle theme--light\"\n                  style={{ fontSize: \"12px\" }}\n                />\n                <div>\n                  {\" \"}\n                  Rebasing tokens or any 'hack' on how a ERC20 token should\n                  function.{\" \"}\n                </div>\n              </div>\n              <div className=\"d-flex align-start\">\n                <i\n                  aria-hidden=\"true\"\n                  className=\"v-icon notranslate mt-1 mr-2 mdi mdi-circle theme--light\"\n                  style={{ fontSize: \"12px\" }}\n                />\n                <div> Fee to sender tokens </div>\n              </div>\n              <div className=\"d-flex align-start\">\n                <i\n                  aria-hidden=\"true\"\n                  className=\"v-icon notranslate mt-1 mr-2 mdi mdi-circle theme--light\"\n                  style={{ fontSize: \"12px\" }}\n                />\n                <div>\n                  {\" \"}\n                  We reserve the right to delist your farm from our front end\n                  app if you dont adhere to these token specifications as it\n                  will affect farmers.{\" \"}\n                </div>\n              </div>\n              <div className=\"mt-3\">\n                {\" \"}\n                Essentially 1 token must always equal 1 token. If you send\n                someone one token and they recieve less than one token you wont\n                be able to generate a farm. For the rest of the 99% of normal\n                ERC20 tokens with no weird transfer functions or magically\n                changing balances (rebasing), this platform is for you.{\" \"}\n              </div>\n              <div className=\"mt-3 primary--text\">\n                {\" \"}\n                Feel free to email Mark at email for help setting up your farm.{\" \"}\n              </div>\n            </div>\n\n            <button\n              type=\"button\"\n              onClick={() => {\n                setPopUpFirstPage(false);\n                setFormStep(1);\n              }}\n              className=\"continueBtn v-btn v-btn--block v-btn--depressed v-btn--rounded theme--light v-size--x-large primary\"\n            >\n              <span className=\"v-btn__content\"> Continue </span>\n            </button>\n          </div>\n        ) : null}\n\n        {formStep > 0 ? renderPart2Modal() : null}\n      </Modal>\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      <center className=\"center-div\">\n        <div className=\"jumbotron\" id=\"ticket\">\n          <h1 style={{ fontWeight: \"bold\", color: \"#fff\" }}>$630k</h1>\n          <p style={{ fontWeight: \"bold\", color: \"#fff\" }}>\n            Total farming liquidity\n          </p>\n          <hr />\n          <div className=\"row\">\n            <div className=\"col-sm-6\"></div>\n\n            {renderModal()}\n\n            <div className=\"col-sm-6\">\n              <button\n                className=\"btn btn-primary btn-lg\"\n                data-toggle=\"modal\"\n                data-target=\"#myWallet\"\n                style={{ background: \"none\", border: \"1px solid #fff\" }}\n              >\n                Create Farm\n              </button>\n              <button\n                className=\"btn btn-primary btn-lg\"\n                style={{ background: \"none\", border: \"1px solid #fff\" }}\n              >\n                <span className=\"fa fa-circle-o\"></span>\n                <span className=\"fa fa-sort\"></span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </center>\n    </div>\n  );\n}\n","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCard.js",["119"],"import React from \"react\";\r\nimport FormCardHeader from \"./FormCardHeader\";\r\nimport FormCardDes from \"./FormCardDes\";\r\nimport FormCardFooter from \"./FormCardFooter\";\r\nimport FooterTabsView from \"./FooterTabsView\";\r\nimport \"./FormCard.css\";\r\n\r\nconst FormCard = ({ data }) => {\r\n  console.log(data)\r\n  const {lpToken} = data;\r\n  const [value, setValue] = React.useState(false);\r\n  const clickHandler = () => {\r\n    setValue(!value);\r\n    console.log(!value);\r\n  };\r\n  return (\r\n    <div className=\"formContainer\">\r\n      <div onClick={clickHandler}>\r\n        <FormCardHeader />\r\n        <FormCardDes  />\r\n        <FormCardFooter />\r\n      </div>\r\n      {value && <FooterTabsView data={data}/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormCard;\r\n","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardHeader.js",["120"],"import React from \"react\";\r\nimport headerLogo from \"./images/headerLogo.png\";\r\nimport \"./FormCardHeader.css\";\r\n\r\nconst FormCardHeader = () => {\r\n  return (\r\n    <div className=\"cardHeaderContainer\">\r\n      <div className=\"headerLogo\">\r\n        <img src={headerLogo} height=\"35\" />\r\n      </div>\r\n      <div className=\"titleSubtitle\">\r\n        <h2>Farm UNCL</h2>\r\n        <p>UNCX / WETH</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormCardHeader;\r\n","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardFooter.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardDes.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FooterTabsView.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCards2.js",["121"],"import React from \"react\";\r\nimport headerLogo from \"./images/headerLogo.png\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport \"./HiddenCards.css\";\r\n\r\nexport const HiddenCards2 = ({ rewardToken }) => {\r\n  const textElemId = uuidv4();\r\n  const clickCopyHandler = () => {\r\n    var elemToCopy = document.getElementById(textElemId);\r\n    const textToCopy = elemToCopy.innerText;\r\n    alert(\"Copy\")\r\n    navigator.clipboard.writeText(textToCopy).then(\r\n      function () {\r\n        console.log(\"Async: Copying to clipboard was successful!\");\r\n      },\r\n      function (err) {\r\n        console.error(\"Async: Could not copy text: \", err);\r\n      }\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"hiddenCardContainer\">\r\n      <div className=\"cardLogo\">\r\n        <img src={headerLogo} height=\"35\" />\r\n      </div>\r\n      <div className=\"cardDetail\">\r\n        <p>Uniswap pair</p>\r\n        <h2>UNCX / WETH</h2>\r\n        <button onClick={clickCopyHandler}>\r\n          <span className=\"ip-btn\" id={textElemId}>\r\n            {rewardToken}\r\n          </span>\r\n          <i class=\"fa fa-clone\" aria-hidden=\"true\"></i>\r\n        </button>\r\n        <br />\r\n        <a href=\"https://etherscan.io/address/0x2f4eb47A1b1F4488C71fc10e39a4aa56AF33Dd49\">\r\n          {\" \"}\r\n          view on Uniswap\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HiddenCards2;\r\n","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\StakeData.js",["122","123"],"import React from \"react\";\r\nimport headerLogo from \"./images/headerLogo.png\";\r\nimport \"./StakeData.css\";\r\n\r\nconst StakeData = () => {\r\n  return (\r\n    <div className=\"stakeDataContainer\">\r\n      <div className=\"stakeHeader\">\r\n      <div>\r\n        <img src={headerLogo} height=\"35\" />\r\n        <h2>UNCX</h2>\r\n        </div>\r\n        <div>\r\n        <img src={headerLogo} height=\"35\" />\r\n        <h2>WETH</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"stakeDes\">\r\n        <p>You need UniV2 liquidity tokens to farm this pool</p>\r\n      </div>\r\n      <div className=\"stakeFooter\">\r\n        <i className=\"fa fa-paw\" aria-hidden=\"true\"></i>\r\n        <p>Get liquidity tokens</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StakeData;\r\n","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCardInfo.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCards.js",["124","125"],"import React from \"react\";\r\nimport headerLogo from \"./images/headerLogo.png\";\r\nimport \"./HiddenCards.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n\r\nexport const HiddenCards = ({ lpToken }) => {\r\n  const myInput = uuidv4();\r\n  const clickCopyHandler = () => {\r\n    var elemToCopy = document.getElementById(myInput);\r\n    const textToCopy = elemToCopy.innerText;\r\n    alert(\"Copy\");\r\n    navigator.clipboard.writeText(textToCopy).then(\r\n      function () {\r\n        console.log(\"Async: Copying to clipboard was successful!\");\r\n      },\r\n      function (err) {\r\n        console.error(\"Async: Could not copy text: \", err);\r\n      }\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"hiddenCardContainer\">\r\n      <div className=\"cardLogo\">\r\n        <img src={headerLogo} height=\"35\" />\r\n      </div>\r\n      <div className=\"cardDetail\">\r\n        <p>Uniswap pair</p>\r\n        <h2>UNCX / WETH</h2>\r\n        <button onClick={clickCopyHandler} >\r\n         <span className=\"ip-btn\" id={myInput}> {lpToken}</span>\r\n\r\n          <i class=\"fa fa-clone\" aria-hidden=\"true\"></i>\r\n        </button>\r\n        <br />\r\n        <a href=\"#\"> view on Uniswap</a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HiddenCards;\r\n","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\HiddenCards3.js",["126","127"],"import React, { useState } from \"react\";\r\nimport headerLogo from \"./images/headerLogo.png\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport \"./HiddenCards.css\";\r\n\r\nexport const HiddenCards3 = ({ address }) => {\r\n\r\n  const textElemId2 = uuidv4();\r\n  const clickCopyHandler = () => {\r\n    var elemToCopy = document.getElementById(textElemId2);\r\n    const textToCopy = elemToCopy.innerText;\r\n    alert(\"Copy\");\r\n    navigator.clipboard.writeText(textToCopy).then(\r\n      function () {\r\n        console.log(\"Async: Copying to clipboard was successful!\");\r\n      },\r\n      function (err) {\r\n        console.error(\"Async: Could not copy text: \", err);\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"hiddenCardContainer\">\r\n      <div className=\"cardLogo\">\r\n        <img src={headerLogo} height=\"35\" />\r\n      </div>\r\n      <div className=\"cardDetail\">\r\n        <p>Uniswap pair</p>\r\n        <h2>UNCX / WETH</h2>\r\n        \r\n          <button onClick={clickCopyHandler}>\r\n            <span\r\n              className=\"ip-btn\"\r\n              id={textElemId2}\r\n            >\r\n              {address}\r\n            </span>\r\n            <i class=\"fa fa-clone\" aria-hidden=\"true\"></i>\r\n          </button>\r\n      \r\n        <br />\r\n        <a href=\"https://etherscan.io/\" target=\"blank\">\r\n          Etherscan\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HiddenCards3;\r\n",{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":4,"column":8,"nodeType":"134","messageId":"135","endLine":4,"endColumn":16},{"ruleId":"132","severity":1,"message":"136","line":8,"column":10,"nodeType":"134","messageId":"135","endLine":8,"endColumn":13},{"ruleId":"132","severity":1,"message":"137","line":45,"column":10,"nodeType":"134","messageId":"135","endLine":45,"endColumn":22},{"ruleId":"132","severity":1,"message":"138","line":45,"column":24,"nodeType":"134","messageId":"135","endLine":45,"endColumn":39},{"ruleId":"139","severity":1,"message":"140","line":173,"column":17,"nodeType":"141","messageId":"142","endLine":173,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":193,"column":17,"nodeType":"141","messageId":"142","endLine":193,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":266,"column":17,"nodeType":"141","messageId":"142","endLine":266,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":287,"column":17,"nodeType":"141","messageId":"142","endLine":287,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":368,"column":17,"nodeType":"141","messageId":"142","endLine":368,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":389,"column":17,"nodeType":"141","messageId":"142","endLine":389,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":509,"column":17,"nodeType":"141","messageId":"142","endLine":509,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":530,"column":17,"nodeType":"141","messageId":"142","endLine":530,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":602,"column":15,"nodeType":"141","messageId":"142","endLine":602,"endColumn":23},{"ruleId":"139","severity":1,"message":"140","line":623,"column":15,"nodeType":"141","messageId":"142","endLine":623,"endColumn":23},{"ruleId":"143","severity":1,"message":"144","line":636,"column":5,"nodeType":"145","messageId":"146","endLine":650,"endColumn":6},{"ruleId":"132","severity":1,"message":"147","line":10,"column":10,"nodeType":"134","messageId":"135","endLine":10,"endColumn":17},{"ruleId":"148","severity":1,"message":"149","line":9,"column":9,"nodeType":"150","endLine":9,"endColumn":45},{"ruleId":"148","severity":1,"message":"149","line":24,"column":9,"nodeType":"150","endLine":24,"endColumn":45},{"ruleId":"148","severity":1,"message":"149","line":10,"column":9,"nodeType":"150","endLine":10,"endColumn":45},{"ruleId":"148","severity":1,"message":"149","line":14,"column":9,"nodeType":"150","endLine":14,"endColumn":45},{"ruleId":"148","severity":1,"message":"149","line":25,"column":9,"nodeType":"150","endLine":25,"endColumn":45},{"ruleId":"151","severity":1,"message":"152","line":36,"column":9,"nodeType":"150","endLine":36,"endColumn":21},{"ruleId":"132","severity":1,"message":"153","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"148","severity":1,"message":"149","line":27,"column":9,"nodeType":"150","endLine":27,"endColumn":45},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'endBlockDate' is assigned a value but never used.","'setEndBlockDate' is assigned a value but never used.","no-dupe-keys","Duplicate key 'fontSize'.","ObjectExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'lpToken' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]