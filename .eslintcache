[{"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\index.js":"1","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\reportWebVitals.js":"2","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\container\\App.js":"3","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\config.js":"4","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\utils\\contract.js":"5","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Navbar\\Navbar.js":"6","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Token\\Token.js":"7","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Modal\\Modal.js":"8","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Navigate\\Navigate.js":"9","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Account\\Account.js":"10","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Index\\Index.js":"11","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCard.js":"12","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardHeader.js":"13","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardDes.js":"14","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardFooter.js":"15","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FooterTabsView.js":"16"},{"size":601,"mtime":1608827692186,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1608827692230,"results":"19","hashOfConfig":"18"},{"size":2287,"mtime":1608840236837,"results":"20","hashOfConfig":"18"},{"size":4402,"mtime":1608827692105,"results":"21","hashOfConfig":"18"},{"size":582,"mtime":1608827692836,"results":"22","hashOfConfig":"18"},{"size":1555,"mtime":1608827692641,"results":"23","hashOfConfig":"18"},{"size":550,"mtime":1608827692760,"results":"24","hashOfConfig":"18"},{"size":2288,"mtime":1608827692549,"results":"25","hashOfConfig":"18"},{"size":1576,"mtime":1608827692720,"results":"26","hashOfConfig":"18"},{"size":749,"mtime":1608827692327,"results":"27","hashOfConfig":"18"},{"size":22689,"mtime":1608827692448,"results":"28","hashOfConfig":"18"},{"size":421,"mtime":1608839166470,"results":"29","hashOfConfig":"18"},{"size":501,"mtime":1608836876669,"results":"30","hashOfConfig":"18"},{"size":247,"mtime":1608838386025,"results":"31","hashOfConfig":"18"},{"size":628,"mtime":1608841426855,"results":"32","hashOfConfig":"18"},{"size":2855,"mtime":1608843134772,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"d8n6ic",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":1,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\index.js",[],["69","70"],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\reportWebVitals.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\container\\App.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\config.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\utils\\contract.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Token\\Token.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Modal\\Modal.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Navigate\\Navigate.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Account\\Account.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\Index\\Index.js",["71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86"],"import React, { useState ,useEffect} from 'react'\nimport \"./Index.css\"\nimport \"./pop.css\"\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport \"../../../node_modules/awesome-react-steps/lib/css/arrows.css\";\nimport { Arrows } from \"awesome-react-steps\";\nimport { Row, Col, Container } from 'react-bootstrap';\n\n\n\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        width: \"40%\",\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)',\n        borderRadius: \"30px\",\n        padding: \"20px\"\n\n\n    }\n};\nModal.defaultStyles.overlay.backgroundColor = '#00000087';\n\n// Modal.setAppElement('#yourAppElement')\n\nexport default function Index(props) {\n    const [contract, setContract] = useState()\n\n    const [isPopUpFirstPage, setPopUpFirstPage] = useState(true)\n    const [formStep, setFormStep] = useState(0)\n\n    const [tokenAddress, setTokenAddress] = useState(\"\");\n    const [pair2Address, setPair2Address] = useState(\"\");\n    const [startDate, setStartDate] = useState(\"\");\n    const [startBlock, setStartBlock] = useState(\"\");\n    const [multiplier, setMultiplier] = useState(1);\n    const [endDate, setEndDate] = useState(\"\");\n    const [expectedLiquidity, setExpectedLiquidity] = useState(\"\");\n\n    const [bonusEndDate, setBonusEndDate] = useState(\"\");\n    const [bonusEndBlock, setBonusEndBlock] = useState(\"\");\n    const [bonusAmount, setBonusAmount] = useState(\"\");\n\n    const [endBlockDate, setEndBlockDate] = useState(\"\");\n    const [endBlock, setEndBlock] = useState(\"\");\n\n    const [modalIsOpen, setIsOpen] = React.useState(false);\n    \n   \n    useEffect(() => {\n        setIsOpen(props.isCreateFarmModalOpen)\n    },[props.isCreateFarmModalOpen])\n\n\n    useEffect(() => {\n        setContract(props.contract)\n    },[props.contract])\n\n\n\n\n\n\n    function afterOpenModal() {\n        // references are now sync'd and can be accessed.\n    }\n\n    function closeModal() {\n        setIsOpen(false);\n    }\n\n\n    const submitForm=async ()=>{\n\n        \n        if(contract){\n\n\n            console.log(\"functios\",tokenAddress,expectedLiquidity,pair2Address,multiplier,\n            startBlock,bonusEndBlock,bonusAmount,)\n            \n            await contract.methods.createFarm(\n                tokenAddress,expectedLiquidity,pair2Address,multiplier,\n                startBlock,bonusEndBlock,bonusAmount,\n\n\n\n\n            )  .send({from:props.account,\n                gas: 1000000})\n\n        }else{\n            alert(\"contract is null\")\n        }\n  \n        console.log(\"dataaaaa\",tokenAddress,pair2Address,\n        startDate,startBlock,multiplier,endDate,bonusEndBlock,bonusEndBlock)\n    }\n\n\n    const renderPart1 = () => {\n        return <Container style={{}}>\n\n            <Col>\n                <span><strong>Paste token address</strong></span>\n                <br></br>\n                <input type=\"text\" placeholder=\"Enter Address\" style={{\n                    padding: 10,\n                    width: \"100%\",\n                    borderRadius: 22,\n                    fontSize: 18,\n                    borderColor: \"gray\", borderWidth: .8\n                }}\n\n                    value={tokenAddress}\n                    onChange={(t) => {\n                        setTokenAddress(t.target.value)\n                    }} />\n                <br></br>\n\n\n                <input type=\"text\" placeholder=\"Expected Liquidity\" style={{\n                    padding: 10,\n                    width: \"100%\",\n                    marginTop:10,\n                    borderRadius: 22,\n                    fontSize: 18,\n                    borderColor: \"gray\", borderWidth: .8\n                }}\n\n                    value={expectedLiquidity}\n                    onChange={(t) => {\n                        setExpectedLiquidity(t.target.value)\n                    }} />\n                <br></br>\n\n                <div className=\"row\" style={{\n                    alignContent: \"center\",\n                    justifyContent: \"center\", marginTop: 10\n                }}>\n\n                    <button\n\n                        onClick={() => {\n                            setFormStep(formStep - 1)\n                            props.onPopupClosed()\n                        }}\n\n\n                        style={{\n                            padding: 8,\n                            flex: 1,\n                            borderRadius: 22,\n                            fontSize: 18,\n                            paddingRight: 10,\n                            paddingLeft: 10,\n                            color: \"#fff\",\n                            fontSize: \"bold\",\n                            backgroundColor: \"red\", borderWidth: .8\n                        }}>Back</button>\n\n\n\n                    <button\n\n                        onClick={() => {\n                            setFormStep(formStep + 1)\n                        }}\n\n                        style={{\n                            flex: 1,\n                            padding: 8,\n                            borderRadius: 22,\n                            fontSize: 18,\n                            paddingRight: 10,\n                            paddingLeft: 10,\n                            color: \"#fff\",\n                            fontSize: \"bold\",\n                            backgroundColor: \"#7e53ff\", borderWidth: .8\n                        }}>Continue</button>\n                </div>\n\n\n\n            </Col>\n\n        </Container>\n    }\n\n\n    const renderPart2 = () => {\n        return <Container style={{}}>\n\n            <Col>\n                <span><strong> Paste uniswap v2 pair address that farmers can farm the yield token on</strong></span>\n                <br></br>\n\n\n\n                <input type=\"text\" placeholder=\"Enter Address\" style={{\n                    padding: 10,\n                    width: \"100%\",\n                    borderRadius: 22,\n                    fontSize: 18,\n                    borderColor: \"gray\", borderWidth: .8\n                }}\n                    value={pair2Address}\n\n                    onChange={(t) => {\n                        setPair2Address(t.target.value)\n                    }} />\n                <br></br>\n\n\n\n                <span><strong>             This MUST be a valid uniswap v2 pair. The contract checks this is a uniswap pair on farm creation. If it is not the script will revert.\n</strong></span>\n\n                <div className=\"row\" style={{\n                    alignContent: \"center\",\n                    justifyContent: \"center\", marginTop: 10\n                }}>\n\n                    <button\n\n                        onClick={() => {\n                            setFormStep(formStep - 1)\n                        }}\n\n\n                        style={{\n                            padding: 8,\n                            flex: 1,\n                            borderRadius: 22,\n                            fontSize: 18,\n                            paddingRight: 10,\n                            paddingLeft: 10,\n                            color: \"#fff\",\n                            fontSize: \"bold\",\n                            backgroundColor: \"red\", borderWidth: .8\n                        }}>Back</button>\n\n\n\n                    <button\n\n                        onClick={() => {\n                            setFormStep(formStep + 1)\n                        }}\n\n                        style={{\n                            flex: 1,\n\n                            padding: 8,\n                            borderRadius: 22,\n                            fontSize: 18,\n                            paddingRight: 10,\n                            paddingLeft: 10,\n                            color: \"#fff\",\n                            fontSize: \"bold\",\n                            backgroundColor: \"#7e53ff\", borderWidth: .8\n                        }}>Continue</button>\n                </div>\n\n\n            </Col>\n\n        </Container>\n\n\n    }\n\n\n    const renderPart3 = () => {\n        return <Container style={{}}>\n\n            <Col>\n                <span><strong>We reccommend a start block at least 24 hours in advance to give people time to get ready to farm.\n</strong></span>\n                <br></br>\n                <input type=\"date\" placeholder=\"Enter Date\" style={{\n                    padding: 10,\n                    width: \"100%\",\n                    borderRadius: 22,\n                    fontSize: 18,\n                    borderColor: \"gray\", borderWidth: .8\n                }}\n\n                    value={startDate}\n\n                    onChange={(t) => {\n                        setStartDate(t.target.value)\n                    }} />\n                <br></br>\n\n\n                <input type=\"text\" placeholder=\"Enter Block\" style={{\n                    padding: 10,\n                    width: \"100%\",\n                    borderRadius: 22,\n                    marginTop: 8,\n                    fontSize: 18,\n                    borderColor: \"gray\", borderWidth: .8\n                }}\n                    value={startBlock}\n\n                    onChange={(t) => {\n                        setStartBlock(t.target.value)\n                    }} />\n                <br></br>\n\n                <div className=\"row\" style={{\n                    alignContent: \"center\",\n                    justifyContent: \"center\", marginTop: 10\n                }}>\n\n                    <button\n\n                        onClick={() => {\n                            setFormStep(formStep - 1)\n                        }}\n\n\n                        style={{\n                            padding: 8,\n                            flex: 1,\n                            borderRadius: 22,\n                            fontSize: 18,\n                            paddingRight: 10,\n                            paddingLeft: 10,\n                            color: \"#fff\",\n                            fontSize: \"bold\",\n                            backgroundColor: \"red\", borderWidth: .8\n                        }}>Back</button>\n\n\n\n                    <button\n\n                        onClick={() => {\n                            setFormStep(formStep + 1)\n                        }}\n\n                        style={{\n                            flex: 1,\n\n                            padding: 8,\n                            borderRadius: 22,\n                            fontSize: 18,\n                            paddingRight: 10,\n                            paddingLeft: 10,\n                            color: \"#fff\",\n                            fontSize: \"bold\",\n                            backgroundColor: \"#7e53ff\", borderWidth: .8\n                        }}>Continue</button>\n                </div>\n\n\n\n            </Col>\n\n        </Container>\n\n    }\n\n\n    const renderPart4 = () => {\n        return <Container style={{}}>\n\n            <Col>\n\n                <input type=\"text\" placeholder=\"Multiplier (1x)\" style={{\n                    padding: 10,\n                    width: \"100%\",\n                    borderRadius: 22,\n                    fontSize: 18,\n                    borderColor: \"gray\", borderWidth: .8\n                }} value={multiplier}\n                    onChange={(t) => {\n                        setMultiplier(t.target.value)\n                    }} />\n                <br></br>\n\n                <span><strong>Bonus periods start at the start block and end at the below specified block. For no bonus period set the multiplier to '1' and the bonus end block to 11484140</strong></span>\n                <br></br>\n\n\n\n                <input type=\"text\" placeholder=\"Bonus Amount\" style={{\n                    padding: 10,\n                    width: \"100%\",\n                    borderRadius: 22,\n                    fontSize: 18,\n                    borderColor: \"gray\", borderWidth: .8\n                }} value={bonusAmount}\n                    onChange={(t) => {\n                        setBonusAmount(t.target.value)\n                    }} />\n                <br></br>\n\n\n                <input type=\"date\" placeholder=\"Bonus end date\" style={{\n                    padding: 10,\n                    width: \"100%\",\n                    borderRadius: 22,\n                    marginTop: 8,\n                    fontSize: 18,\n                    borderColor: \"gray\", borderWidth: .8\n                }}\n\n                    value={bonusEndDate}\n\n                    onChange={(t) => {\n                        setBonusEndDate(t.target.value)\n                    }} />\n                <br></br>\n\n\n                <input type=\"text\" placeholder=\"Bonus end block\" style={{\n                    padding: 10,\n                    width: \"100%\",\n                    borderRadius: 22,\n                    marginTop: 8,\n                    fontSize: 18,\n                    borderColor: \"gray\", borderWidth: .8\n                }}\n\n                    value={bonusEndBlock}\n\n                    onChange={(t) => {\n                        setBonusEndBlock(t.target.value)\n                    }} />\n                <br></br>\n\n\n\n\n                <div className=\"row\" style={{\n                    alignContent: \"center\",\n                    justifyContent: \"center\", marginTop: 10\n                }}>\n\n                    <button\n\n                        onClick={() => {\n                            setFormStep(formStep - 1)\n                        }}\n\n\n                        style={{\n                            padding: 8,\n                            flex: 1,\n                            borderRadius: 22,\n                            fontSize: 18,\n                            paddingRight: 10,\n                            paddingLeft: 10,\n                            color: \"#fff\",\n                            fontSize: \"bold\",\n                            backgroundColor: \"red\", borderWidth: .8\n                        }}>Back</button>\n\n\n\n                    <button\n\n                        onClick={() => {\n                            setFormStep(formStep + 1)\n                        }}\n\n                        style={{\n                            flex: 1,\n\n                            padding: 8,\n                            borderRadius: 22,\n                            fontSize: 18,\n                            paddingRight: 10,\n                            paddingLeft: 10,\n                            color: \"#fff\",\n                            fontSize: \"bold\",\n                            backgroundColor: \"#7e53ff\", borderWidth: .8\n                        }}>Continue</button>\n                </div>\n\n\n            </Col>\n\n        </Container>\n\n    }\n\n\n    const renderPart5 = () => {\n        return <>\n\n\n            <input type=\"date\" placeholder=\"Date\" style={{\n                padding: 10,\n                width: \"100%\",\n                borderRadius: 22,\n                marginTop: 8,\n                fontSize: 18,\n                borderColor: \"gray\", borderWidth: .8\n            }}\n                value={endDate}\n                onChange={(t) => {\n                    setEndDate(t.target.value)\n                }} />\n            <br></br>\n\n\n            <input type=\"text\" placeholder=\"Block Number\" style={{\n                padding: 10,\n                width: \"100%\",\n                borderRadius: 22,\n                marginTop: 8,\n                fontSize: 18,\n                borderColor: \"gray\", borderWidth: .8\n            }}\n                value={endBlock}\n\n                onChange={(t) => {\n                    setEndBlock(t.target.value)\n                }} />\n            <div className=\"row\" style={{\n                alignContent: \"center\",\n                justifyContent: \"center\", marginTop: 10\n            }}>\n\n                <button\n\n                    onClick={() => {\n                        setFormStep(formStep - 1)\n                    }}\n\n\n                    style={{\n                        padding: 8,\n                        flex: 1,\n                        borderRadius: 22,\n                        fontSize: 18,\n                        paddingRight: 10,\n                        paddingLeft: 10,\n                        color: \"#fff\",\n                        fontSize: \"bold\",\n                        backgroundColor: \"red\", borderWidth: .8\n                    }}>Back</button>\n\n\n\n                <button\n                \n                \n                onClick={() => {\n                    submitForm()\n                }}\n                \n                style={{\n                    flex: 1,\n\n                    padding: 8,\n                    borderRadius: 22,\n                    fontSize: 18,\n                    paddingRight: 10,\n                    paddingLeft: 10,\n                    color: \"#fff\",\n                    fontSize: \"bold\",\n                    backgroundColor: \"#7e53ff\", borderWidth: .8\n                }}>Continue</button>\n            </div>\n        </>\n    }\n\n\n\n\n    const renderFormPart = (partNumber) => {\n\n\n        switch (partNumber) {\n            case 1:\n\n                return renderPart1()\n            case 2:\n                return renderPart2()\n\n            case 3:\n                return renderPart3()\n\n            case 4:\n                return renderPart4()\n\n            case 5:\n                return renderPart5()\n\n        }\n    }\n\n\n\n    const renderPart2Modal = () => {\n\n        return <div style={{\n            marginBottom: 10,\n        }}>\n\n\n\n            <Arrows\n                model={{\n                    steps: [\n                        { label: \"Farm which token?\" },\n                        { label: \"Select uniswap pair\" },\n                        { label: \"Start Block\" },\n\n                        { label: \"1x Bonus\" },\n                        { label: \"End Block\" },\n\n\n                    ],\n                    current: formStep - 1\n                }}\n            />;\n\n\n{renderFormPart(formStep)}\n        </div>\n    }\n\n    const renderModal = () => {\n        return <Modal\n            isOpen={modalIsOpen}\n            onAfterOpen={afterOpenModal}\n            onRequestClose={closeModal}\n            style={customStyles}\n            shouldCloseOnOverlayClick={false}\n            contentLabel=\"Example Modal\"\n        >\n\n            <div className=\"row\" style={{\n                borderBottom: \"1px #b2afaf solid\"\n\n            }}>\n\n                <button type=\"button\" className=\"backBtn v-btn v-btn--flat v-btn--icon v-btn--round theme--light v-size--default\"><span className=\"v-btn__content\"><i aria-hidden=\"true\" className=\"v-icon notranslate mdi mdi-arrow-left theme--light\" /></span></button>\n\n\n\n                <div style={{\n                    textAlign: \"center\",\n                    flex: 1,\n                }}>\n                    <h2> Launch a Farm  </h2>\n\n                    <p>Current block: 11465157</p>\n                </div>\n\n\n\n                <button type=\"button\"\n\n                    className=\"backBtn v-btn v-btn--flat v-btn--icon v-btn--round theme--light v-size--default\"><span className=\"v-btn__content\"><i aria-hidden=\"true\" className=\"v-icon notranslate mdi mdi-arrow-left theme--light\" /></span></button>\n\n\n            </div>\n\n\n\n            {isPopUpFirstPage ?\n\n                <div style={{ marginLeft: 20, marginRight: 20 }}>\n\n                    <span style={{ fontSize: 30, }}>Launching a farm on a uniswap pair is now incredibly simple.\n                    You deposit the reward token into a vault contract, set the start block,\n                    endblock, and bonus period -And your done!\n            </span>\n\n\n\n\n\n                    <div className=\"caption mt-3\" style={{ marginBottom: 10 }}> A farming contract is final. You cannot change <span className=\"font-weight-bold\">any</span> paramaters once initialised. There is no way to remove tokens other than farm them out over the set period. You cannot increase rewards either although you may create additional farms. <div className=\"font-weight-bold mt-3\"> Do not use this with </div><div className=\"d-flex align-start\"><i aria-hidden=\"true\" className=\"v-icon notranslate mt-1 mr-2 mdi mdi-circle theme--light\" style={{ fontSize: '12px' }} /><div> Rebasing tokens or any 'hack' on how a ERC20 token should function. </div></div><div className=\"d-flex align-start\"><i aria-hidden=\"true\" className=\"v-icon notranslate mt-1 mr-2 mdi mdi-circle theme--light\" style={{ fontSize: '12px' }} /><div> Fee to sender tokens </div></div><div className=\"d-flex align-start\"><i aria-hidden=\"true\" className=\"v-icon notranslate mt-1 mr-2 mdi mdi-circle theme--light\" style={{ fontSize: '12px' }} /><div> We reserve the right to delist your farm from our front end app if you dont adhere to these token specifications as it will affect farmers. </div></div><div className=\"mt-3\"> Essentially 1 token must always equal 1 token. If you send someone one token and they recieve less than one token you wont be able to generate a farm. For the rest of the 99% of normal ERC20 tokens with no weird transfer functions or magically changing balances (rebasing), this platform is for you. </div><div className=\"mt-3 primary--text\"> Feel free to email Mark at email for help setting up your farm. </div></div>\n\n                    <button type=\"button\"\n\n                        onClick={() => {\n                            setPopUpFirstPage(false)\n                            setFormStep(1)\n                        }}\n\n\n                        className=\"continueBtn v-btn v-btn--block v-btn--depressed v-btn--rounded theme--light v-size--x-large primary\"><span className=\"v-btn__content\"> Continue </span></button>\n                </div>\n                : null}\n\n\n                {formStep >0?renderPart2Modal():null}\n\n\n        </Modal>\n    }\n\n\n\n\n\n    return (\n        <div className=\"container\">\n            <center>\n                <div className=\"jumbotron\" id=\"ticket\">\n                    <h1 style={{ fontWeight: \"bold\", color: \"#fff\" }}>$630k</h1>\n                    <p style={{ fontWeight: \"bold\", color: \"#fff\" }}>Total farming liquidity</p><hr />\n                    <div className=\"row\">\n                        <div className=\"col-sm-6\"></div>\n\n\n                        {renderModal()}\n\n\n\n                        <div className=\"col-sm-6\">\n                            <button className=\"btn btn-primary btn-lg\" data-toggle=\"modal\" data-target=\"#myWallet\" style={{ background: \"none\", border: \"1px solid #fff\" }}>Create Farm</button>\n                            <button className=\"btn btn-primary btn-lg\" style={{ background: \"none\", border: \"1px solid #fff\" }}>\n                                <span className=\"fa fa-circle-o\"></span>\n                                <span className=\"fa fa-sort\"></span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </center>\n        </div>\n    )\n}\n","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCard.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardHeader.js",["87"],"import React from 'react'\r\nimport headerLogo from \"./images/headerLogo.png\";\r\nimport \"./FormCardHeader.css\";\r\n\r\n const FormCardHeader = () => {\r\n    return (\r\n        <div className=\"cardHeaderContainer\">\r\n         <div className=\"headerLogo\">\r\n            <img src={headerLogo} height=\"35\" />\r\n         </div>  \r\n         <div className=\"titleSubtitle\">\r\n             <h2>Farm UNCL</h2>\r\n             <p>UNCX / WETH</p>\r\n         </div>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormCardHeader;\r\n","C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardDes.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FormCardFooter.js",[],"C:\\Users\\Muhammed Umair\\Documents\\GitHub\\complete_cryptochrome\\src\\components\\FormCard\\FooterTabsView.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":4,"column":8,"nodeType":"94","messageId":"95","endLine":4,"endColumn":16},{"ruleId":"92","severity":1,"message":"96","line":8,"column":10,"nodeType":"94","messageId":"95","endLine":8,"endColumn":13},{"ruleId":"92","severity":1,"message":"97","line":49,"column":12,"nodeType":"94","messageId":"95","endLine":49,"endColumn":24},{"ruleId":"92","severity":1,"message":"98","line":49,"column":26,"nodeType":"94","messageId":"95","endLine":49,"endColumn":41},{"ruleId":"99","severity":1,"message":"100","line":87,"column":19,"nodeType":"101","messageId":"102","endLine":94,"endColumn":21,"fix":"103"},{"ruleId":"104","severity":1,"message":"105","line":163,"column":29,"nodeType":"106","messageId":"107","endLine":163,"endColumn":37},{"ruleId":"104","severity":1,"message":"105","line":183,"column":29,"nodeType":"106","messageId":"107","endLine":183,"endColumn":37},{"ruleId":"104","severity":1,"message":"105","line":244,"column":29,"nodeType":"106","messageId":"107","endLine":244,"endColumn":37},{"ruleId":"104","severity":1,"message":"105","line":265,"column":29,"nodeType":"106","messageId":"107","endLine":265,"endColumn":37},{"ruleId":"104","severity":1,"message":"105","line":337,"column":29,"nodeType":"106","messageId":"107","endLine":337,"endColumn":37},{"ruleId":"104","severity":1,"message":"105","line":358,"column":29,"nodeType":"106","messageId":"107","endLine":358,"endColumn":37},{"ruleId":"104","severity":1,"message":"105","line":463,"column":29,"nodeType":"106","messageId":"107","endLine":463,"endColumn":37},{"ruleId":"104","severity":1,"message":"105","line":484,"column":29,"nodeType":"106","messageId":"107","endLine":484,"endColumn":37},{"ruleId":"104","severity":1,"message":"105","line":549,"column":25,"nodeType":"106","messageId":"107","endLine":549,"endColumn":33},{"ruleId":"104","severity":1,"message":"105","line":571,"column":21,"nodeType":"106","messageId":"107","endLine":571,"endColumn":29},{"ruleId":"108","severity":1,"message":"109","line":584,"column":9,"nodeType":"110","messageId":"111","endLine":600,"endColumn":10},{"ruleId":"112","severity":1,"message":"113","line":9,"column":13,"nodeType":"114","endLine":9,"endColumn":49},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'endBlockDate' is assigned a value but never used.","'setEndBlockDate' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property send.","MemberExpression","unexpectedWhitespace",{"range":"117","text":"118"},"no-dupe-keys","Duplicate key 'fontSize'.","ObjectExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",[2434,2437],"."]